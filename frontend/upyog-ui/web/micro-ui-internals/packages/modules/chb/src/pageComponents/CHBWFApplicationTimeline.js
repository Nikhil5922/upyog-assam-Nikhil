import { ActionLinks, CardSectionHeader, CheckPoint, CloseSvg, ConnectingCheckPoints, Loader, SubmitBar } from "@upyog/digit-ui-react-components";
import React, { Fragment } from "react";
import { useTranslation } from "react-i18next";
import { Link } from "react-router-dom";
import CHBWFCaption from "./CHBWFCaption";


/**
 * CHBWFApplicationTimeline Component
 * 
 * This component is responsible for rendering the workflow application timeline for the CHB module.
 * It displays the timeline of actions and states for a specific application, including details such as dates, comments, and assignees.
 * 
 * Props:
 * - `application`: The application object containing details like `tenantId`, `bookingNo`, and `channel`.
 * 
 * Hooks:
 * - `useTranslation`: Provides the `t` function for internationalization.
 * - `Digit.Hooks.useWorkflowDetails`: Custom hook to fetch workflow details for the given application.
 * 
 * Variables:
 * - `businessService`: The business service name for the workflow (e.g., "booking-refund").
 * - `isLoading`: Boolean indicating whether the workflow details are being loaded.
 * - `data`: The fetched workflow details, including the timeline and process instances.
 * 
 * Functions:
 * - `OpenImage`: Opens a full-size image in a new tab when a thumbnail is clicked.
 * - `getTimelineCaptions`: Generates captions for each checkpoint in the timeline based on its state and details.
 *    - Handles different states such as "OPEN" or other workflow states.
 *    - Displays details like date, name, mobile number, comments, and thumbnails.
 * 
 * Logic:
 * - If `isLoading` is true, displays a loader.
 * - If the timeline data is available:
 *    - Displays a section header for the application timeline.
 *    - Renders a single checkpoint if the timeline has only one entry.
 *    - Renders multiple checkpoints connected by lines if the timeline has multiple entries.
 *    - Each checkpoint displays its state, completion status, and custom captions generated by `getTimelineCaptions`.
 * 
 * Returns:
 * - A React fragment containing the application timeline with checkpoints and captions.
 * - Displays a loader if the workflow details are still being fetched.
 */
const CHBWFApplicationTimeline = (props) => {
  
  const { t } = useTranslation();
  const businessService = "booking-refund";

  const { isLoading, data } = Digit.Hooks.useWorkflowDetails({
    tenantId: props.application?.tenantId,
    id: props.application?.bookingNo,
    moduleCode: businessService,
  });


  function OpenImage(imageSource, index, thumbnailsToShow) {
    window.open(thumbnailsToShow?.fullImage?.[0], "_blank");
  }

  const getTimelineCaptions = (checkpoint) => {

    if (checkpoint.state === "OPEN") 
      {
      const caption = {
        date: checkpoint?.auditDetails?.lastModified,
        source: props.application?.channel || "",
      };
      return <CHBWFCaption data={caption} />;
    }
    else if (checkpoint.state) {
      const caption = {
        date: checkpoint?.auditDetails?.lastModified,
        name: checkpoint?.assignes?.[0]?.name,
        mobileNumber: checkpoint?.assignes?.[0]?.mobileNumber,
        comment: t(checkpoint?.comment),
        wfComment: checkpoint.wfComment,
        thumbnailsToShow: checkpoint?.thumbnailsToShow,
      };
      return <CHBWFCaption data={caption} OpenImage={OpenImage} />;
    }


    else {
      const caption = {
        date: Digit.DateUtils.ConvertTimestampToDate(props.application?.auditDetails.lastModified),
        name: checkpoint?.assigner?.name,
        comment: t(checkpoint?.comment),
      };
      return <CHBWFCaption data={caption} />;
    }
  };

  if (isLoading) {
    return <Loader />;
  }

  return (
    <React.Fragment>
      {!isLoading && (
        <Fragment>
          {data?.timeline?.length > 0 && (
            <CardSectionHeader style={{ marginBottom: "16px", marginTop: "32px" }}>
              {t("CS_APPLICATION_DETAILS_APPLICATION_TIMELINE")}
            </CardSectionHeader>
          )}
          {data?.timeline && data?.timeline?.length === 1 ? (
            <CheckPoint
              isCompleted={true}
              label={t((data?.timeline[0]?.state && `WF_${businessService}_${data.timeline[0].state}`) || "NA")}
              customChild={getTimelineCaptions(data?.timeline[0])}
            />
          ) : (
            <ConnectingCheckPoints>
              {data?.timeline &&
                data?.timeline.map((checkpoint, index) => {

                  return (
                    <React.Fragment key={index}>
                      <CheckPoint
                        keyValue={index}
                        isCompleted={index === 0}
                        label={t(
                          `${data?.processInstances[index].state?.["state"]}`
                        )}
                        customChild={getTimelineCaptions(checkpoint)}
                      />
                    </React.Fragment>
                  );
                })}
            </ConnectingCheckPoints>
          )}
        </Fragment>
      )}
    </React.Fragment>
  );
};

export default CHBWFApplicationTimeline;